<!doctype html>
<html lang="en" data-bs-theme="dark">
<head>
    <%- include('../snippets/head.ejs'); %>
    <link rel="stylesheet" type="text/css"
          href="https://cdn.datatables.net/v/bs5/jq-3.6.0/dt-1.13.1/b-2.3.3/b-colvis-2.3.3/fh-3.3.1/sl-1.5.0/datatables.min.css"/>
</head>
<body>

<%
function mode(arr) {
    const mappedArr = arr.map(submission => submission.wadName);
    return mappedArr.sort((a, b) =>
            mappedArr.filter(v => v === a).length
            - mappedArr.filter(v => v === b).length
    ).pop();
}
%>
<div id="overlay" class="hidden">
    <div id="loader" class="hidden"></div>
</div>
<div class="container mt-5">
    <main>
        <% if(indexModel.currentActiveRound){ %>
            <div class="row">
                <div class="col-md-12">
                    <div class="card border-primary mb-3">
                        <div class="card-header"><%- indexModel.currentActiveRound.name; -%></div>
                        <div class="card-body text-center">
                            <% if(indexModel.currentActiveRound.paused){ %>
                                <h5 class="card-title mb-4 text-danger">Round is currently paused</h5>
                            <% }else{ %>
                                <h5 class="card-title mb-4 text-success">Round is active</h5>
                            <% } %>
                            <div class="row">
                                <div class="col-md-4">
                                    <h5 class="card-title text-primary">Number of submissions</h5>
                                    <h5 class="card-text"><%- indexModel.currentActiveRound.submissions?.length ?? 0; -%></h5>
                                </div>
                                <div class="col-md-4">
                                    <h5 class="card-title text-primary">Most requested WAD</h5>
                                    <h5 class="card-text"><%- mode(indexModel.currentActiveRound.submissions) ?? "N/A"; -%></h5>
                                </div>
                                <div class="col-md-4">
                                    <h5 class="card-title text-primary">Number of map authors</h5>
                                    <h5 class="card-text"><%- indexModel.currentActiveRound.submissions?.filter(submission => submission.submitterAuthor)?.length ?? 0; -%></h5>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer text-center">
                            <div class="btn-group" role="group" aria-label="Basic outlined example">
                                <% if(indexModel.currentActiveRound.paused){ %>
                                    <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal"
                                            data-bs-target="#resumeRoundModal">Resume round
                                    </button>
                                <% } else { %>
                                    <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal"
                                            data-bs-target="#pauseRoundModal">Pause round
                                    </button>
                                <% } %>
                                <button type="button" class="btn btn-outline-success" id="endRoundButton"
                                        data-bs-toggle="modal" data-bs-target="#endRoundModal">End round
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt-5">
                <div class="col-md-12">
                    <div class="card border-primary mb-3 ml-3">
                        <div class="card-header">Current submissions</div>
                        <div class="card-body">
                            <%- include('../snippets/SubmissionsTable.ejs', {
                            submissions: indexModel.currentActiveRound.submissions,
                            isPReviousResults: true,
                            isAdmin: true,
                            isResults: false
                            }); %>
                        </div>
                    </div>
                </div>
            </div>
        <% }else { %>
            <div class="card text-center">
                <div class="card-header">
                    Create a new submission round
                </div>
                <div class="card-body">
                    <p class="card-text">Clicking this button will create a new submission round and enable people
                        to submit entries.</p>
                    <button class="btn btn-outline-primary" id="makeNewRoundButton">Make new round</button>
                </div>
            </div>
        <% } %>
        <% if(indexModel.previousRounds.length > 0){ %>
            <div class="row mt-5">
                <div class="col-md-12">
                    <%- include('../snippets/resultTable.ejs', {
                    model: indexModel,
                    includeDownload: true,
                    isAdmin: true
                    }); %>
                </div>
            </div>
        <% } %>
        <div class="row mt-5">
            <div class="col-md-12 text-center">
                <div class="btn-group" role="group" aria-label="Basic example">
                    <form method="get" action="/rest/auth/logout" class="d-inline">
                        <button class="btn btn-outline-primary" type="submit">Logout</button>
                    </form>
                    <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal"
                            data-bs-target="#changeDetailsModel">Change Details
                    </button>
                </div>
            </div>
        </div>
    </main>
</div>
<% if(indexModel.currentActiveRound){ %>
    <% if(indexModel.currentActiveRound.paused){ %>
        <div class="modal fade" id="resumeRoundModal" tabindex="-1" aria-labelledby="resumeRoundModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="resumeRoundModalLabel">Resume
                            round <%- indexModel.currentActiveRound.id; -%></h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Resuming this round will allow submissions again.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-primary" id="resumeRoundButton">Resume</button>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    <% } else { %>
        <div class="modal fade" id="pauseRoundModal" tabindex="-1" aria-labelledby="pauseRoundModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="pauseRoundModalLabel">Pause
                            round <%- indexModel.currentActiveRound.id; -%></h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you wish to pause this round? This will lock the round and prevent anyone from
                            submitting any more entries.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-primary" id="pauseRoundButton">Pause</button>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    <% } %>


    <div class="modal fade" id="endRoundModal" tabindex="-1" aria-labelledby="endRoundModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="endRoundModalLabel">End current round</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="endRoundModalContent">
                    <form id="endRoundWizard">
                        <nav>
                            <div class="nav nav-pills nav-fill" id="nav-tab" role="tablist">
                                <a class="nav-link active" id="step1-tab" data-toggle="tab" href="#step1">Pause
                                    round</a>
                                <a class="nav-link" id="step2-tab" data-toggle="tab" href="#step2">Select winners</a>
                                <a class="nav-link" id="step3-tab" data-toggle="tab" href="#step3">Review</a>
                            </div>
                        </nav>
                        <div class="tab-content py-4" id="nav-tabContent">
                            <div class="tab-pane fade show active" id="step1">
                                <div class="alert alert-primary" role="alert">
                                    <i class="bi bi-exclamation-triangle"></i>
                                    In order to finish this round and pick winners, you must first pause the current
                                    active round.
                                </div>
                                <% if(indexModel.currentActiveRound.paused){ %>
                                    <div class="alert alert-success" role="alert">
                                        <i class="bi bi-check-circle"></i> Round is paused
                                    </div>
                                <% } else { %>
                                    <div class="alert alert-warning" role="alert">
                                        <i class="bi bi-exclamation-triangle"></i>
                                        Please pause the round to continue.
                                        <button type="button" class="btn btn-outline-success"
                                                id="endRoundPauseRoundButton">Pause round
                                        </button>
                                    </div>
                                <% } %>
                            </div>
                            <div class="tab-pane fade" id="step2">
                                <table class="table" id="endRoundResultsTable">
                                    <thead>
                                    <tr>
                                        <th scope="col">ID</th>
                                        <th scope="col">WAD</th>
                                        <th scope="col">Level</th>
                                        <th scope="col">Submitter</th>
                                        <th scope="col">Author</th>
                                    </tr>
                                    </thead>
                                    <tbody id="endRoundResultsTableBody"></tbody>
                                </table>
                            </div>
                            <div class="tab-pane fade" id="step3">
                                <div class="alert alert-primary" role="alert">
                                    Review the selected entries here. Once you finish, this will end the current round
                                    and confirm the entries.
                                </div>
                                <table class="table" id="endRoundReviewTable">
                                    <thead>
                                    <tr>
                                        <th scope="col">No.</th>
                                        <th scope="col">WAD</th>
                                        <th scope="col">Level</th>
                                        <th scope="col">Submitter</th>
                                        <th scope="col">Author</th>
                                    </tr>
                                    </thead>
                                    <tbody id="endRoundReviewTableBody"></tbody>
                                </table>
                            </div>
                        </div>
                        <div class="row justify-content-between">
                            <div class="col-auto">
                                <button type="button" class="btn btn-outline-primary" data-enchanter="previous">
                                    Previous
                                </button>
                            </div>
                            <div class="col-auto">
                                <button type="button" class="btn btn-outline-primary" data-enchanter="next">Next
                                </button>
                                <button type="button" class="btn btn-outline-success" data-enchanter="finish">Finish
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="modifySubmissionModal" tabindex="-1" aria-labelledby="modifySubmissionModalLabel"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="modifySubmissionModalLabel">Modify submission</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <%- include('../snippets/submitForm.ejs', {
                    model: indexModel,
                    isAdmin: true
                    }); %>
                </div>
                <div class="mt-3">
                    <div class="hidden" id="error">
                        <div class="alert alert-danger d-flex align-items-center" role="alert">
                            <i class="flex-shrink-0 me-2 bi bi-exclamation-triangle-fill"></i>
                            <div id="errorContent"></div>
                        </div>
                    </div>
                    <div class="hidden" id="success">
                        <div class="alert alert-success d-flex align-items-center" role="alert" id="success">
                            <i class="flex-shrink-0 me-2 bi bi-check-circle-fill"></i>
                            <div id="successContent">
                                Entry modified successfully.
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" id="submissionModifySaveButton">Save changes
                    </button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

<% } %>
<div class="modal fade" id="submissionInfoModal" tabindex="-1" aria-labelledby="submissionInfoModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="submissionInfoModalLabel"></h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="submissionInfoContent">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="setYoutubeLinkModal" tabindex="-1" aria-labelledby="setYoutubeLinkModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="setYoutubeLinkModalLabel">Set YouTube link</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="submissionInfoContent">
                <div class="alert alert-success" role="alert">
                    Use this to set a YouTube link after you have published the video
                </div>
                <input type="hidden" id="setYoutubeLinkSubmissionId">
                <div class="mb-3 mt-3">
                    <label for="youtubeLinkUrl" class="form-label">Enter YouTube extension</label>
                    <div class="input-group">
                        <span class="input-group-text">https://www.youtube.com/</span>
                        <input id="youtubeLinkUrl" type="text" class="form-control" placeholder="watch?v=t7BW5ZiTmrE">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" id="youtubeLinkOk">Ok</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="submissionStatusModal" tabindex="-1" aria-labelledby="submissionStatusModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="submissionStatusModalLabel">Modify submission status</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="submissionStatusModalInfoContent">
                <form id="statusForm">
                    <input type="hidden" name="id" id="statusSubmissionId"/>
                    <div class="mb-3">
                        <label for="statusSelect" class="form-label">Status</label>
                        <select class="form-select" aria-label="Status Select" id="statusSelect" name="status">
                            <option selected value="Queued">Queued</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Rejected">Rejected</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="statusComments" class="form-label">Comments</label>
                        <textarea class="form-control" id="statusComments" rows="3" name="additionalInfo"></textarea>
                    </div>
                    <div class="mb-3 hidden" id="generateRandomWrapper">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="generateRandomEntryCheck">
                            <label class="form-check-label" for="generateRandomEntryCheck">
                                generate another random entry for this round
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" id="submissionStatusModalOk">Ok</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="changeDetailsModel" tabindex="-1" aria-labelledby="changeDetailsModelLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="changeDetailsModelLabel">Change account details</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="changeDetailsModelInfoContent">
                <div class="mb-3">
                    <label for="changeEmail" class="form-label">Email address</label>
                    <input type="email" class="form-control" name="email" id="changeEmail"
                           value="<%- user.email; -%>">
                </div>
                <div class="mb-3">
                    <label for="changePassword" class="form-label">New Password</label>
                    <input type="password" class="form-control" name="password" id="changePassword">
                </div>
                <div class="mb-3">
                    <label for="changePasswordRepeat" class="form-label">Repeat Password</label>
                    <input type="password" class="form-control" id="changePasswordRepeat">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" id="changeDetailsModelOk">Ok</button>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript"
        src="https://cdn.datatables.net/v/bs5/jq-3.6.0/dt-1.13.1/b-2.3.3/b-colvis-2.3.3/fh-3.3.1/sl-1.5.0/datatables.min.js"></script>
<%- include('../snippets/scripts.ejs'); %>
<script type="text/javascript" src="../assets/vendor/Enchanter/enchanter.js"></script>
</body>
</html>

<script>
    Site.loadPage(async site => {
        const submissionInfoModal = new bootstrap.Modal('#submissionInfoModal');
        const submissionStatusModal = new bootstrap.Modal('#submissionStatusModal');
        const setYoutubeLinkModal = new bootstrap.Modal('#setYoutubeLinkModal');
        <% if(indexModel.currentActiveRound){ %>
        const submissionModificationModal = new bootstrap.Modal('#modifySubmissionModal');
        <% } %>
        loadEventListeners();
        initDt();


        function showSubmissionInfoModel(no, id, wadName, wadLevel, wadEngine, gzDoomAction, submitterName, author, distributable, info, email, downloadUrl) {

            const modalContentWrapper = document.getElementById("submissionInfoContent");
            const modalTitle = document.getElementById("submissionInfoModalLabel");

            const title = `Info for submission ${id}`;
            const body = `
                <p>Id: ${id}</p>
                <p>Wad Name: ${wadName}</p>
                <p>Wad Level: ${wadLevel}</p>
                <p>Wad Engine: ${wadEngine}</p>
                ${gzDoomAction ? `<p>GZDoom actions: ${gzDoomAction}</p>` : ""}
                ${submitterName ? `<p>Submitter name: ${submitterName}</p>` : ""}
                <p>Submitter created this map: ${author}</p>
                <p>distributable: ${distributable}</p>
                ${info ? `Info: <pre>${info}</pre>` : ""}
                <p>email: ${email}</p>
                <p>download: ${downloadUrl}</p>
            `;
            modalTitle.innerHTML = title;
            modalContentWrapper.innerHTML = body;
            submissionInfoModal.show();
        }

        function loadEventListeners() {
            const changeDetailsModal = new bootstrap.Modal('#changeDetailsModel');
            document.getElementById("changeDetailsModel").addEventListener("show.bs.modal", () => {
                document.getElementById("changePassword").value = null;
                document.getElementById("changePasswordRepeat").value = null;
            });

            ((() => {
                document.getElementById("youtubeLinkOk").addEventListener("click", async e => {
                    const submissionId = document.getElementById("setYoutubeLinkSubmissionId").value;
                    const linkExt = document.getElementById("youtubeLinkUrl").value;

                    let endpoint;
                    if (!linkExt) {
                        endpoint = `${baseUrl}/submission/${submissionId}/setYoutubeLink?link`;
                    } else {
                        const link = `https://www.youtube.com/${linkExt}`;
                        const encodedLink = encodeURIComponent(link);
                        endpoint = `${baseUrl}/submission/${submissionId}/setYoutubeLink?link=${encodedLink}`;
                    }

                    site.loading(true);
                    try {
                        await fetch(endpoint, {
                            method: 'POST'
                        });
                    } catch (e) {
                        alert(e.message);
                        return;
                    } finally {
                        Site.loading(false);
                    }
                    alert(`YouTube link ${linkExt ? "set" : "cleared"}`);
                    window.location.reload();
                });
            })());
            ((() => {
                document.getElementById("changeDetailsModelOk").addEventListener("click", async e => {
                    const formData = new URLSearchParams();
                    const email = document.getElementById("changeEmail").value;
                    const password = document.getElementById("changePassword").value;
                    const repeatPassword = document.getElementById("changePasswordRepeat").value;
                    if (!email) {
                        return alert("Please specify email.");
                    }
                    if (!password) {
                        return alert("password must not be blank.");
                    }
                    if (password !== repeatPassword) {
                        return alert("Passwords do not match.");
                    }
                    formData.append("email", email);
                    formData.append("password", password);
                    site.loading(true);
                    try {
                        await fetch(`${baseUrl}/auth/changeDetails`, {
                            method: 'POST',
                            body: formData
                        });
                    } catch (e) {
                        alert(e.message);
                        return;
                    } finally {
                        Site.loading(false);
                    }
                    alert("User details changed successfully.");
                    changeDetailsModal.hide();
                });
            })());

            ((() => {
                document.getElementById("statusSelect").addEventListener("change", ev => {
                    const value = ev.target.value;
                    const checkBoxWrapper = document.getElementById("generateRandomWrapper");
                    const generateRandomEntryCheck = document.getElementById("generateRandomEntryCheck");
                    generateRandomEntryCheck.checked = false;
                    if (value === "Rejected") {
                        Site.display(false, checkBoxWrapper);
                    } else {
                        Site.display(true, checkBoxWrapper);
                    }
                });
                document.getElementById("submissionStatusModalOk").addEventListener("click", async ev => {
                    const generateRandomEntryCheck = document.getElementById("generateRandomEntryCheck");
                    const submissionId = document.getElementById("statusSubmissionId").value;
                    const status = document.getElementById("statusSelect").value;
                    const additionalInfo = document.getElementById("statusComments").value || null;
                    const formData = new URLSearchParams();
                    formData.append("submissionId", submissionId);
                    formData.append("status", status);
                    if (additionalInfo) {
                        formData.append("additionalInfo", additionalInfo);
                    }
                    site.loading(true);
                    try {
                        await fetch(`${baseUrl}/submission/changeStatus`, {
                            method: 'POST',
                            body: formData
                        });
                    } catch (e) {
                        alert(e.message);
                        return;
                    } finally {
                        Site.loading(false);
                    }
                    if (generateRandomEntryCheck.checked) {
                        const submissionEntryId = ev.target.dataset.entryid;
                        site.loading(true);
                        try {
                            await fetch(`${baseUrl}/submissionRoundResult/addRandomEntry?roundId=${submissionEntryId}`, {
                                method: 'POST'
                            });
                        } catch (e) {
                            alert(e.message);
                            return;
                        } finally {
                            Site.loading(false);
                        }
                    }
                    window.location.reload();
                });
            })());
            ((() => {
                const distributableRadios = document.querySelectorAll("#authorYes,#authorNo");
                if (distributableRadios) {
                    for (const distributableRadio of distributableRadios) {
                        distributableRadio.addEventListener("change", evt => {
                            const value = evt.target.value;
                            const distributableSection = document.getElementById("distributableSection");
                            if (value === "true") {
                                site.display(false, distributableSection);
                            } else {
                                site.display(true, distributableSection);
                            }
                        });
                    }
                }
            })());


            ((() => {
                const resumeRoundButton = document.getElementById("resumeRoundButton") ?? null;
                const pauseRoundButton = document.getElementById("pauseRoundButton") ?? null;

                async function pauseRound(pause) {
                    site.loading(true);
                    const resp = await fetch(`${baseUrl}/submissionRound/pauseRound?pause=${pause}`, {
                        method: "POST"
                    });
                    const json = await resp.json();
                    if (resp.status !== 200) {
                        alert(json.message);
                        return;
                    }
                    site.loading(false);
                    window.location.reload();
                }

                document.getElementById("endRoundPauseRoundButton")?.addEventListener("click", async ev => {
                    await pauseRound(true);
                });
                resumeRoundButton?.addEventListener("click", async ev => {
                    await pauseRound(false);
                });
                pauseRoundButton?.addEventListener("click", async ev => {
                    await pauseRound(true);
                });
            })());

            <% if(indexModel.currentActiveRound){ %>
            ((() => {
                let step2Dt;

                function getDuplicateRows() {
                    const findDuplicates = (arr) => {
                        let sorted_arr = arr.slice().sort();
                        let results = [];
                        for (let i = 0; i < sorted_arr.length - 1; i++) {
                            if (sorted_arr[i + 1] === sorted_arr[i]) {
                                results.push(sorted_arr[i]);
                            }
                        }
                        return [...new Set(results)];
                    };

                    const tableData = step2Dt.rows().data();
                    const idArr = [];
                    tableData.each(value => {
                        idArr.push(value[0]);
                    });
                    const dupes = findDuplicates(idArr);
                    const dupeRows = [];
                    step2Dt.rows().every(function () {
                        const data = this.data();
                        const id = data[0];
                        const htmlRow = this.node();
                        if (dupes.includes(id)) {
                            dupeRows.push(htmlRow);
                        }
                    });
                    return dupeRows;
                }

                const wizard = new Enchanter('endRoundWizard', {}, {
                    onNext: () => {
                        function validate() {
                            function validateStep1() {
                                return <%- indexModel.currentActiveRound.paused; -%>;
                            }

                            function validateStep2() {
                                const duplicateRows = getDuplicateRows();
                                const valid = duplicateRows.length === 0;
                                if (!valid) {
                                    alert("Please remove duplicate entries to proceed.");
                                }
                                return valid;
                            }

                            function validateStep3() {
                                return true;
                            }

                            const currentIndex = wizard.currentIndex();
                            switch (currentIndex) {
                                case 1:
                                    return validateStep1();
                                case 2:
                                    return validateStep2();
                                case 3:
                                    return validateStep3();
                            }
                        }

                        function buildNextStep() {

                            async function buildStep2() {

                                function highlightDupes() {
                                    step2Dt.rows().every(function () {
                                        const htmlRow = this.node();
                                        htmlRow.classList.remove("table-danger");
                                    });
                                    const dupeRows = getDuplicateRows();
                                    for (let dupeRow of dupeRows) {
                                        dupeRow.classList.add("table-danger");
                                    }
                                }

                                async function buildResultCache() {
                                    site.loading(true);
                                    let json;
                                    let result;
                                    try {
                                        result = await fetch(`${baseUrl}/submissionRoundResult/buildResultSet`, {
                                            method: "POST"
                                        });
                                        json = await result.json();
                                    } finally {
                                        site.loading(false);
                                    }

                                    if (result.status !== 200) {
                                        console.error(json);
                                        alert("Failed to build result cache.");
                                        return false;
                                    }
                                    return true;
                                }

                                const built = await buildResultCache();
                                if (step2Dt || !built) {
                                    return;
                                }

                                step2Dt = $("#endRoundResultsTable").DataTable({
                                    dom: 'Bfrtip',
                                    stateSave: true,
                                    paging: false,
                                    fixedHeader: {
                                        header: true
                                    },
                                    select: {
                                        style: 'multi'
                                    },
                                    columnDefs: [
                                        {
                                            "visible": false,
                                            "targets": 0
                                        }
                                    ],
                                    ordering: false,
                                    buttons: [
                                        {
                                            text: 'Generate random entry',
                                            action: async (e, dt) => {
                                                const generateEntryEndpoint = `${baseUrl}/submissionRoundResult/generateEntries?count=1`;
                                                site.loading(true);
                                                let json;
                                                let result;
                                                try {
                                                    result = await fetch(generateEntryEndpoint);
                                                    json = await result.json();
                                                } finally {
                                                    site.loading(false);
                                                }

                                                if (result.status !== 200) {
                                                    console.error(json);
                                                    alert("Failed to generate entry. See console for more info.");
                                                    return;
                                                }
                                                if (json.length === 0) {
                                                    return;
                                                }
                                                const entry = json[0];
                                                dt.row.add([
                                                    entry.id,
                                                    entry.WADName,
                                                    entry.level,
                                                    entry.authorName ?? "anonymous",
                                                    entry.author
                                                ]).draw();
                                                highlightDupes();
                                            }
                                        },
                                        {
                                            extend: 'selected',
                                            text: 'Re-generate',
                                            action: async (e, dt) => {
                                                const selected = dt.rows({selected: true}).count();
                                                const generateEntryEndpoint = `${baseUrl}/submissionRoundResult/generateEntries?count=${selected}`;
                                                site.loading(true);
                                                let json;
                                                let result;
                                                try {
                                                    result = await fetch(generateEntryEndpoint);
                                                    json = await result.json();
                                                } finally {
                                                    site.loading(false);
                                                }
                                                if (result.status !== 200) {
                                                    console.error(json);
                                                    alert("Failed to generate entry. See console for more info.");
                                                    return;
                                                }
                                                const selectedRows = dt.rows({selected: true});
                                                selectedRows.every(function (rowIdx, tableLoop, rowLoop) {
                                                    const entry = json[rowLoop];
                                                    this.data([
                                                        entry.id,
                                                        entry.WADName,
                                                        entry.level,
                                                        entry.authorName ?? "anonymous",
                                                        entry.author
                                                    ]).draw();
                                                });
                                                selectedRows.deselect();
                                                highlightDupes();
                                            }
                                        },
                                        {
                                            extend: 'selected',
                                            text: 'Delete',
                                            action: async (e, dt) => {
                                                dt.rows({selected: true}).remove().draw(false);
                                                highlightDupes();
                                            }
                                        }
                                    ]
                                });
                            }

                            function buildStep3() {
                                const step2Data = step2Dt.rows().data();
                                let tableHtml = "";
                                step2Data.each((rows, index) => {
                                    tableHtml += "<tr>";
                                    tableHtml += `<td>${index + 1}</td>`;
                                    for (let i = 1; i < rows.length; i++) {
                                        tableHtml += `<td>${rows[i]}</td>`;
                                    }
                                    tableHtml += "</tr>";
                                });
                                document.getElementById("endRoundReviewTableBody").innerHTML = tableHtml;
                            }

                            const nextStep = wizard.nextIndex();
                            switch (nextStep) {
                                case 2:
                                    buildStep2();
                                    break;
                                case 3:
                                    buildStep3();
                            }
                        }

                        if (!validate()) {
                            return false;
                        }
                        buildNextStep();
                    },
                    onFinish: async () => {
                        const chosenIds = [];
                        step2Dt.rows().every(function () {
                            const data = this.data();
                            const id = data[0];
                            chosenIds.push(Number.parseInt(id));
                        });
                        site.loading(true);
                        let resp;
                        try {
                            resp = await fetch(`${baseUrl}/submissionRoundResult/submitEntries`, {
                                method: "POST",
                                body: JSON.stringify(chosenIds),
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json'
                                }
                            });
                        } catch (e) {
                            alert(e);
                            return;
                        } finally {
                            site.loading(false);
                        }
                        if (resp.status !== 200) {
                            alert("Unable to submit entries.");
                            return;
                        }
                        window.location.reload();
                    },
                });
            })());
            <% } %>

            document.getElementById("submissionModifySaveButton")?.addEventListener("click", async ev => {
                try {
                    const result = await site.submitEntryForm(ev, "modifyEntry", true);
                    if (result) {
                        window.location.reload();
                    }
                } catch {

                }
            });

            document.getElementById("makeNewRoundButton")?.addEventListener("click", async ev => {
                const roundName = prompt("Submission round name");
                if (!roundName?.trim()) {
                    alert("Please supply a round name.");
                    return;
                }
                site.loading(true);
                let newRound;
                try {
                    newRound = await fetch(`${baseUrl}/submissionRound/newRound?name=${roundName}`, {
                        method: "POST"
                    });
                } finally {
                    site.loading(false);
                }
                if (newRound.status !== 201) {
                    alert("Unable to create a new submission round. See server logs for info.");
                    return;
                }
                window.location.reload();
            });
        }

        function initDt() {
            $('.submissionsTable').each(function () {
                const el = $(this);
                const isPreviousRoundCard = el.closest(".preRoundCard").length > 0;
                const dtOpts = {
                    dom: 'Bfrtip',
                    stateSave: true,
                    scrollY: 600,
                    scrollX: false,
                    scrollCollapse: true,
                    paging: false,
                    fixedHeader: {
                        header: true
                    },
                    select: {
                        style: isPreviousRoundCard ? 'single' : 'multi'
                    }
                };


                const buttons = [
                    'colvis',
                    {
                        extend: 'selectedSingle',
                        text: 'Full info',
                        action: (e, dt) => {
                            const selectedRow = dt.row({selected: true}).data();
                            showSubmissionInfoModel.apply(undefined, selectedRow);
                        }
                    }
                ];
                if (isPreviousRoundCard && <%- !(!!indexModel.currentActiveRound); -%>) {
                    dtOpts.stateSave = false;
                }
                if (isPreviousRoundCard) {
                    dtOpts["columnDefs"] = [
                        {"visible": false, "targets": [0, 4, 5, 7, 8, 9, 10, 11]}
                    ];
                }
                if (!isPreviousRoundCard) {
                    buttons.push({
                            extend: 'selected',
                            text: 'Delete',
                            action: async (e, dt) => {
                                const confirm = window.confirm("Are you sure you wish to delete these entries?");
                                if (!confirm) {
                                    return;
                                }
                                const idArr = [];
                                dt.rows({selected: true}).every(function () {
                                    const data = this.data();
                                    idArr.push(data[0]);
                                });
                                site.loading(true);
                                let response;
                                try {
                                    response = await fetch(`${baseUrl}/submission/deleteEntries`, {
                                        method: "DELETE",
                                        headers: {
                                            'Accept': 'application/json',
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(idArr)
                                    });
                                } catch (e) {
                                    alert(e.message);
                                    return;
                                } finally {
                                    site.loading(false);
                                }
                                const responseStatus = response.status;
                                const responseJson = await response.json();
                                if (responseStatus !== 200) {
                                    return alert(responseJson.message);
                                }
                                dt.rows({selected: true}).remove().draw(false);
                            }
                        },
                        {
                            extend: 'selectedSingle',
                            text: 'Modify',
                            action: async (e, dt) => {
                                const selectedRow = dt.row({selected: true}).data();
                                const id = selectedRow[0];
                                site.loading(true);
                                let submission;
                                try {
                                    submission = await fetch(`${baseUrl}/submission/getSubmission/${id}`);
                                } finally {
                                    site.loading(false);
                                }
                                const submissionObj = await submission.json();
                                const wadName = submissionObj.WADName;
                                const wadURL = submissionObj.WAD ?? null;
                                const isAuthor = submissionObj.author;
                                const distributable = isAuthor && submissionObj.distributable;
                                const changeEv = new Event('change');
                                const authorYes = document.getElementById("authorYes");
                                const authorNo = document.getElementById("authorNo");
                                const distributableYes = document.getElementById("distributableYes");
                                const distributableNo = document.getElementById("distributableNo");
                                if (isAuthor) {
                                    authorYes.checked = true;
                                    authorYes.dispatchEvent(changeEv);
                                } else {
                                    authorNo.checked = true;
                                    authorNo.dispatchEvent(changeEv);
                                }
                                if (distributable) {
                                    distributableYes.checked = true;
                                } else {
                                    distributableNo.checked = true;
                                }

                                const wadUrlInput = document.getElementById("wadDownloadUrlSection");
                                if (!wadURL) {
                                    wadUrlInput.classList.add("hidden");
                                    wadUrlInput.querySelector("input").setAttribute("disabled", "true");
                                } else {
                                    wadUrlInput.classList.remove("hidden");
                                    wadUrlInput.querySelector("input").removeAttribute("disabled");
                                }
                                const level = submissionObj.level;
                                const engine = submissionObj.engine;
                                const submitterName = submissionObj.authorName;
                                document.getElementById("wadName").value = wadName;
                                if (wadURL) {
                                    document.getElementById("wadUrl").value = wadURL;
                                }
                                document.getElementById("levelToPlay").value = level;
                                document.getElementById("gameEngine").value = engine;
                                document.getElementById("authorName").value = submitterName;
                                document.getElementById("submissionId").value = id;
                                submissionModificationModal.show();
                            }
                        });
                } else {
                    buttons.push({
                            extend: 'selectedSingle',
                            text: 'Change status',
                            action: async (e, dt) => {
                                const submissionEntryId = e.target.closest(".tab-pane").dataset.entryid;
                                const selectedRow = dt.row({selected: true}).data();
                                const id = selectedRow[0];
                                let submission;
                                try {
                                    submission = await fetch(`${baseUrl}/submission/getSubmission/${id}`);
                                } finally {
                                    site.loading(false);
                                }
                                const submissionObj = await submission.json();
                                const statusObj = submissionObj.status;
                                const dd = document.getElementById('statusSelect');
                                const input = document.getElementById("statusComments");
                                document.getElementById("statusSubmissionId").value = submissionObj.id;
                                input.value = null;
                                dd.selectedIndex = [...dd.options].findIndex(option => option.text === statusObj.status);
                                if (statusObj.additionalInfo) {
                                    input.value = statusObj.additionalInfo;
                                }
                                document.getElementById("submissionStatusModalOk").dataset.entryid = submissionEntryId;
                                submissionStatusModal.show();
                            }
                        },
                        {
                            extend: 'selectedSingle',
                            text: 'Set YouTube link',
                            action: async (e, dt) => {
                                const selectedRow = dt.row({selected: true}).data();
                                const id = selectedRow[0];
                                document.getElementById("setYoutubeLinkSubmissionId").value = id;
                                setYoutubeLinkModal.show();
                            }
                        });
                }
                dtOpts["buttons"] = buttons;
                el.DataTable(dtOpts);
            });
        }
    });
</script>
